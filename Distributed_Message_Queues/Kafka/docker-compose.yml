# Of the three message brokers you'll see in this lesson, Kafka is by far the most sophisticated and intricate. Real-time event-driven applications leverage this distributed streaming technology. Its capacity to handle massive amounts of data with nearly no performance latency is its key selling feature.

# * We need to build up a distributed cluster in order to run Kafka. A multi-container Docker application may be started at once using Docker Compose.

version: "3"
services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper